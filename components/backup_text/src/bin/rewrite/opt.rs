// Copyright 2021 TiKV Project Authors. Licensed under Apache-2.0.

use std::path::PathBuf;

use kvproto::brpb::FileFormat;
use structopt::StructOpt;

#[derive(StructOpt)]
#[structopt(
    name = "rewrite",
    about = "Rewrite backup files between `sst` and other formats."
)]
pub struct Opt {
    /// Rewrite mode
    #[structopt(subcommand)]
    pub mode: RewriteMode,
    /// Path to the directory of original files
    #[structopt(name = "input", short, long, parse(from_os_str))]
    pub path: PathBuf,
    /// Path to the directory of rewritten files, `<input>/rewrite.<format>` if not present
    #[structopt(name = "output", short, long, parse(from_os_str))]
    pub new_path: Option<PathBuf>,
    /// Thread concurrency for rewriting
    #[structopt(short, long, default_value = "8")]
    pub threads: usize,
}

#[derive(Debug, Clone, Copy, StructOpt)]
#[structopt(name = "rewrite mode")]
pub enum RewriteMode {
    /// Rewrite from SST to (JSON based) text
    #[structopt(name = "sst-to-text")]
    ToText,
    /// Rewrite from SST to (tidb-lightning compatible) CSV
    #[structopt(name = "sst-to-csv")]
    ToCsv {
        /// Copy schema sqls generated by patched BR, if present
        #[structopt(short = "s", long)]
        copy_schema_sql: bool,
    },
    /// Rewrite from (JSON based) text to SST
    #[structopt(name = "text-to-sst")]
    ToSst,
}

impl RewriteMode {
    pub fn extension(&self) -> &'static str {
        match self {
            RewriteMode::ToText => "txt",
            RewriteMode::ToCsv { .. } => "csv",
            RewriteMode::ToSst => "sst",
        }
    }

    pub fn file_format(&self) -> FileFormat {
        match self {
            RewriteMode::ToText => FileFormat::Text,
            RewriteMode::ToCsv { .. } => FileFormat::Csv,
            RewriteMode::ToSst => FileFormat::Sst,
        }
    }

    pub fn description(&self) -> &'static str {
        match self {
            RewriteMode::ToText => "sst => text",
            RewriteMode::ToCsv { .. } => "sst => csv",
            RewriteMode::ToSst => "text => sst",
        }
    }
}
